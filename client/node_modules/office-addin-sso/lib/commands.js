// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startSSOService = exports.configureSSO = void 0;
const chalk = require("chalk");
const office_addin_cli_1 = require("office-addin-cli");
const office_addin_manifest_1 = require("office-addin-manifest");
const defaults_1 = require("./defaults");
const configure = require("./configure");
const server_1 = require("./server");
const ssoDataSettings_1 = require("./ssoDataSettings");
const office_addin_usage_data_1 = require("office-addin-usage-data");
const inquirer = require("inquirer");
/* global process, console */
function configureSSO(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        // Check platform and return if not Windows or Mac
        if (process.platform !== "win32" && process.platform !== "darwin") {
            console.log(chalk.yellow(`${process.platform} is not supported. Only Windows and Mac are supported`));
            return;
        }
        else if ((0, ssoDataSettings_1.applicationDataConfigured)(manifestPath)) {
            console.log(chalk.yellow("Project was already previously updated."));
            const question = {
                message: `Continue anyway?`,
                name: "didUserConfirm",
                type: "confirm",
            };
            const answer = yield inquirer.prompt([question]);
            if (!answer.didUserConfirm) {
                return;
            }
        }
        const port = parseDevServerPort(process.env.npm_package_config_dev_server_port) || 3000;
        // Log start time for configuration process
        const ssoConfigStartTime = new Date().getTime();
        // Check to see if Azure CLI is installed.  If it isn't installed, then install it
        const cliInstalled = yield configure.isAzureCliInstalled();
        if (!cliInstalled) {
            console.log(chalk.yellow("Azure CLI is not installed.  Installing now before proceeding - this could take a few minutes."));
            yield configure.installAzureCli();
            if (process.platform === "win32") {
                console.log(chalk.green("Please close your command shell, reopen and run configure-sso again.  This is necessary to register the path to the Azure CLI"));
            }
            return;
        }
        console.log("Opening browser for authentication to Azure. Enter valid Azure credentials");
        const userJson = yield configure.logIntoAzure();
        if (Object.keys(userJson).length >= 1) {
            console.log("Login was successful!");
            const manifestInfo = yield office_addin_manifest_1.OfficeAddinManifest.readManifestFile(manifestPath);
            // Register application in Azure
            console.log("Registering new application in Azure");
            const applicationJson = yield configure.createNewApplication(manifestInfo.displayName, port.toString(), userJson);
            if (applicationJson) {
                console.log("Application was successfully registered with Azure");
                // Set application IdentifierUri
                console.log("Setting identifierUri");
                yield configure.setIdentifierUri(applicationJson, port.toString());
                // Set application sign-in audience
                console.log("Setting signin audience");
                yield configure.setSignInAudience(applicationJson);
                // Grant admin consent for application if logged-in user is a tenant admin
                if (yield configure.isUserTenantAdmin(userJson)) {
                    console.log("Granting admin consent");
                    yield configure.grantAdminConsent(applicationJson);
                    // Check to set if SharePoint reply urls are set for tenant. If not, set them
                    const setSharePointReplyUrls = yield configure.setSharePointTenantReplyUrls(applicationJson["publisherDomain"].substr(0, applicationJson["publisherDomain"].indexOf(".")));
                    if (setSharePointReplyUrls) {
                        console.log("Set SharePoint reply urls for tenant");
                    }
                    // Check to set if Outlook reply url is set for tenant. If not, set them
                    const setOutlookReplyUrl = yield configure.setOutlookTenantReplyUrl();
                    if (setOutlookReplyUrl) {
                        console.log("Set Outlook reply url for tenant");
                    }
                }
                // Create an application secret and add to the credential store
                console.log("Setting application secret");
                const secret = yield configure.setApplicationSecret(applicationJson);
                console.log(chalk.green(`App secret is ${secret}`));
                // Add secret to Credential Store (Windows) or Keychain(Mac)
                if (process.platform === "win32") {
                    console.log(`Adding application secret for ${manifestInfo.displayName} to Windows Credential Store`);
                }
                else {
                    console.log(`Adding application secret for ${manifestInfo.displayName} to Mac OS Keychain. You will need to provide an admin password to update the Keychain`);
                }
                (0, ssoDataSettings_1.addSecretToCredentialStore)(manifestInfo.displayName, secret);
            }
            else {
                const errorMessage = "Failed to register application";
                defaults_1.usageDataObject.reportException("createNewApplication", errorMessage);
                console.log(chalk.red(errorMessage));
                return;
            }
            // Write application data to project files (manifest.xml, .env, src/taskpane/fallbacktaskpane.ts)
            console.log(`Updating source files with application ID and port`);
            const projectUpdated = yield (0, ssoDataSettings_1.writeApplicationData)(applicationJson["appId"], port.toString(), manifestPath);
            if (!projectUpdated) {
                console.log(chalk.yellow(`Project was already previously updated. You will need to update the CLIENT_ID and PORT settings manually`));
            }
            // Log out of Azure
            console.log("Logging out of Azure now");
            yield configure.logoutAzure();
            console.log(chalk.green(`Application with id ${applicationJson["appId"]} successfully registered in Azure.  Go to https://ms.portal.azure.com/#home and search for 'App Registrations' to see your application`));
            // Log end time for configuration process and compute in seconds
            const ssoConfigEndTime = new Date().getTime();
            const ssoConfigDuration = (ssoConfigEndTime - ssoConfigStartTime) / 1000;
            // Send usage data
            defaults_1.usageDataObject.reportSuccess("configureSSO", {
                configDuration: ssoConfigDuration,
            });
        }
        else {
            const errorMessage = "Login to Azure did not succeed";
            defaults_1.usageDataObject.reportException("configureSSO", errorMessage);
            throw new Error(errorMessage);
        }
    });
}
exports.configureSSO = configureSSO;
function startSSOService(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // Check platform and return if not Windows or Mac
            if (process.platform !== "win32" && process.platform !== "darwin") {
                console.log(chalk.yellow(`${process.platform} is not supported. Only Windows and Mac are supported`));
                throw new office_addin_usage_data_1.ExpectedError(`${process.platform} is not supported. Only Windows and Mac are supported`);
            }
            const sso = new server_1.SSOService(manifestPath);
            sso.startSsoService();
            defaults_1.usageDataObject.reportSuccess("startSSOService");
        }
        catch (err) {
            defaults_1.usageDataObject.reportException("startSSOService", err);
        }
    });
}
exports.startSSOService = startSSOService;
function parseDevServerPort(optionValue) {
    const devServerPort = (0, office_addin_cli_1.parseNumber)(optionValue, "--dev-server-port should specify a number.");
    if (devServerPort !== undefined) {
        if (!Number.isInteger(devServerPort)) {
            throw new office_addin_usage_data_1.ExpectedError("--dev-server-port should be an integer.");
        }
        if (devServerPort < 0 || devServerPort > 65535) {
            throw new office_addin_usage_data_1.ExpectedError("--dev-server-port should be between 0 and 65535.");
        }
    }
    return devServerPort;
}
//# sourceMappingURL=commands.js.map