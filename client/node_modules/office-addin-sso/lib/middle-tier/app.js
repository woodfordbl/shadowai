/*
 * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. -->
 *
 * This file is the main Node.js server file that defines the express middleware.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
if (process.env.NODE_ENV !== "production") {
    require("dotenv").config();
}
const createError = require("http-errors");
const express = require("express");
const path = require("path");
const cookieParser = require("cookie-parser");
const logger = require("morgan");
const msgraph_helper_1 = require("./msgraph-helper");
const ssoauth_helper_1 = require("./ssoauth-helper");
const defaults_1 = require("../defaults");
/* global process, require, __dirname */
class App {
    constructor(port) {
        this.appInstance = express();
        this.port = port;
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            this.appInstance.set("port", this.port);
            // // view engine setup
            this.appInstance.set("views", path.join(__dirname, "views"));
            this.appInstance.set("view engine", "pug");
            this.appInstance.use(logger("dev"));
            this.appInstance.use(express.json());
            this.appInstance.use(express.urlencoded({ extended: false }));
            this.appInstance.use(cookieParser());
            /* Turn off caching when developing */
            if (process.env.NODE_ENV !== "production") {
                this.appInstance.use(express.static(path.join(process.cwd(), "dist"), { etag: false }));
                this.appInstance.use(function (req, res, next) {
                    res.header("Cache-Control", "private, no-cache, no-store, must-revalidate");
                    res.header("Expires", "-1");
                    res.header("Pragma", "no-cache");
                    next();
                });
            }
            else {
                // In production mode, let static files be cached.
                this.appInstance.use(express.static(path.join(process.cwd(), "dist")));
            }
            const indexRouter = express.Router();
            indexRouter.get("/", function (req, res) {
                res.render("/taskpane.html");
            });
            this.appInstance.use("/", indexRouter);
            // listen for 'ping'
            this.appInstance.get("/ping", function (req, res) {
                res.send(process.platform);
            });
            this.appInstance.get("/taskpane.html", (req, res) => __awaiter(this, void 0, void 0, function* () {
                return res.sendfile("taskpane.html");
            }));
            this.appInstance.get("/fallbackauthdialog.html", (req, res) => __awaiter(this, void 0, void 0, function* () {
                return res.sendfile("fallbackauthdialog.html");
            }));
            this.appInstance.get("/getuserdata", ssoauth_helper_1.validateJwt, function (req, res, next) {
                return __awaiter(this, void 0, void 0, function* () {
                    const graphTokenResponse = yield (0, ssoauth_helper_1.getAccessToken)(req.get("Authorization"));
                    if (graphTokenResponse.claims || graphTokenResponse.error) {
                        graphTokenResponse.claims
                            ? defaults_1.usageDataObject.reportSuccess("getuserdata()", { details: "Got claims response" })
                            : defaults_1.usageDataObject.reportError("AccessTokenError", new Error("Access Token Error: " + graphTokenResponse.error));
                        res.send(graphTokenResponse);
                    }
                    else {
                        const graphToken = graphTokenResponse.access_token;
                        const graphUrlSegment = process.env.GRAPH_URL_SEGMENT || "/me";
                        const graphQueryParamSegment = process.env.QUERY_PARAM_SEGMENT || "";
                        const graphData = yield (0, msgraph_helper_1.getGraphData)(graphToken, graphUrlSegment, graphQueryParamSegment);
                        // If Microsoft Graph returns an error, such as invalid or expired token,
                        // there will be a code property in the returned object set to a HTTP status (e.g. 401).
                        // Relay it to the client. It will caught in the fail callback of `makeGraphApiCall`.
                        if (graphData.code) {
                            defaults_1.usageDataObject.reportException("getuserdata()", graphData.code);
                            next(createError(graphData.code, "Microsoft Graph error " + JSON.stringify(graphData)));
                        }
                        else {
                            defaults_1.usageDataObject.reportSuccess("getuserdata()");
                            res.send(graphData);
                        }
                    }
                });
            });
            // Catch 404 and forward to error handler
            this.appInstance.use(function (req, res, next) {
                next(createError(404));
            });
            // error handler
            this.appInstance.use(function (err, req, res) {
                // set locals, only providing error in development
                res.locals.message = err.message;
                res.locals.error = req.app.get("env") === "development" ? err : {};
                // render the error page
                res.status(err.status || 500);
                res.render("error");
            });
        });
    }
}
exports.App = App;
//# sourceMappingURL=app.js.map