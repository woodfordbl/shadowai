/*
 * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license. See full license in root of repo. -->
 *
 * This file defines the routes within the authRoute router.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJwt = exports.getAccessToken = void 0;
const fetch = require("node-fetch");
const form = require("form-urlencoded");
const jwt = require("jsonwebtoken");
const jwks_rsa_1 = require("jwks-rsa");
/* global process, console */
const DISCOVERY_KEYS_ENDPOINT = "https://login.microsoftonline.com/common/discovery/v2.0/keys";
function getAccessToken(authorization) {
    return __awaiter(this, void 0, void 0, function* () {
        const scopeName = process.env.SCOPE || "User.Read";
        if (authorization === null) {
            let error = new Error("No Authorization header was found.");
            Promise.reject(error);
        }
        else {
            const [, /* schema */ jwt] = authorization.split(" ");
            const formParams = {
                client_id: process.env.CLIENT_ID,
                client_secret: process.env.secret,
                grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
                assertion: jwt,
                requested_token_use: "on_behalf_of",
                scope: [scopeName].join(" "),
            };
            const stsDomain = "https://login.microsoftonline.com";
            const tenant = "common";
            const tokenURLSegment = "oauth2/v2.0/token";
            try {
                const tokenResponse = yield fetch(`${stsDomain}/${tenant}/${tokenURLSegment}`, {
                    method: "POST",
                    body: form.default(formParams),
                    headers: {
                        Accept: "application/json",
                        "Content-Type": "application/x-www-form-urlencoded",
                    },
                });
                const json = yield tokenResponse.json();
                return json;
            }
            catch (error) {
                Promise.reject(error);
            }
        }
    });
}
exports.getAccessToken = getAccessToken;
function validateJwt(req, res, next) {
    const authHeader = req.headers.authorization;
    if (authHeader) {
        const token = authHeader.split(" ")[1];
        const validationOptions = {
            audience: process.env.CLIENT_ID,
        };
        jwt.verify(token, getSigningKeys, validationOptions, (err, payload) => {
            //custom logic to regex search for tenant id in the issuer.
            //test multi tenant setup.
            //test msa
            if (err) {
                console.log(err);
                return res.sendStatus(403);
            }
            next();
        });
    }
}
exports.validateJwt = validateJwt;
function getSigningKeys(header, callback) {
    var client = new jwks_rsa_1.JwksClient({
        jwksUri: DISCOVERY_KEYS_ENDPOINT,
    });
    client.getSigningKey(header.kid, function (err, key) {
        callback(null, key.getPublicKey());
    });
}
//# sourceMappingURL=ssoauth-helper.js.map