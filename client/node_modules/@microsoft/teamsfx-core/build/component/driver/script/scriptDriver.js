"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scriptDriver = exports.ScriptDriver = void 0;
const tslib_1 = require("tslib");
/**
 * @author huajiezhang <huajiezhang@microsoft.com>
 */
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const typedi_1 = require("typedi");
const hooks_1 = require("@feathersjs/hooks");
const addStartAndEndTelemetry_1 = require("../middleware/addStartAndEndTelemetry");
const commonConstant_1 = require("../../constant/commonConstant");
const utils_1 = require("../../code/utils");
const messages_1 = require("../../messages");
const ACTION_NAME = "script";
let ScriptDriver = class ScriptDriver {
    async run(args, context) {
        var _a, _b;
        const typedArgs = args;
        await ((_a = context.progressBar) === null || _a === void 0 ? void 0 : _a.next(messages_1.ProgressMessages.runCommand(typedArgs.run, (_b = typedArgs.workingDirectory) !== null && _b !== void 0 ? _b : "./")));
        const res = await utils_1.executeCommand(typedArgs.run, context.projectPath, context.logProvider, context.ui, typedArgs.workingDirectory, undefined, typedArgs.shell, typedArgs.timeout, typedArgs.redirectTo);
        if (res.isErr())
            return teamsfx_api_1.err(res.error);
        const outputs = res.value[1];
        const kvArray = Object.keys(outputs).map((k) => [k, outputs[k]]);
        return teamsfx_api_1.ok(new Map(kvArray));
    }
    async execute(args, ctx) {
        const res = await this.run(args, ctx);
        const summaries = res.isOk()
            ? [`Successfully executed command ${utils_1.maskSecretValues(args.run)}`]
            : [];
        return { result: res, summaries: summaries };
    }
};
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.SCRIPT_COMPONENT)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ScriptDriver.prototype, "run", null);
tslib_1.__decorate([
    hooks_1.hooks([addStartAndEndTelemetry_1.addStartAndEndTelemetry(ACTION_NAME, commonConstant_1.TelemetryConstant.SCRIPT_COMPONENT)]),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ScriptDriver.prototype, "execute", null);
ScriptDriver = tslib_1.__decorate([
    typedi_1.Service(ACTION_NAME)
], ScriptDriver);
exports.ScriptDriver = ScriptDriver;
exports.scriptDriver = new ScriptDriver();
//# sourceMappingURL=scriptDriver.js.map